!function(){"use strict";var e=class{constructor(e){let{popupSelector:t}=e;this._popupElement=document.querySelector(t),this._closeByEscape=this._closeByEscape.bind(this),this._closeByMouseDown=this._closeByMouseDown.bind(this)}open(){this._popupElement.classList.add("modal_opened"),this._setEventListeners()}close(){this._popupElement.classList.remove("modal_opened"),this._popupElement.removeEventListener("click",this._closeByMouseDown),document.removeEventListener("keydown",this._closeByEscape)}_closeByEscape=e=>{"Escape"===e.key&&this.close()};_closeByMouseDown=e=>{(e.target.classList.contains("modal")||e.target.classList.contains("modal__close"))&&this.close()};_setEventListeners(){document.addEventListener("keydown",this._closeByEscape),this._popupElement.addEventListener("click",this._closeByMouseDown)}},t=class{constructor(e,t){this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._formEl=t}_showInputError(e){const t=this._formEl.querySelector(`#${e.id}-error`);e.classList.add(this._inputErrorClass),t.textContent=e.validationMessage,t.classList.add(this._errorClass)}_hideInputError(e){const t=this._formEl.querySelector(`#${e.id}-error`);e.classList.remove(this._inputErrorClass),t.textContent="",t.classList.remove(this._errorClass)}_checkInputValidity(e){if(!e.validity.valid)return this._showInputError(e);this._hideInputError(e)}_hasInvalidInput(){return!this._inputEls.every((e=>e.validity.valid))}toggleButtonState(){if(this._hasInvalidInput())return this._submitButton.classList.add(this._inactiveButtonClass),void(this._submitButton.disabled=!0);this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.disabled=!1}_setEventListeners(){this._inputEls=[...this._formEl.querySelectorAll(this._inputSelector)],this._submitButton=this._formEl.querySelector(this._submitButtonSelector),this._inputEls.forEach((e=>{e.addEventListener("input",(t=>{this._checkInputValidity(e),this.toggleButtonState()}))}))}enableValidation(){this._formEl.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners(this._formEl)}},s=class extends e{constructor(e,t){super({popupSelector:e}),this._handleFormSubmit=t,this._popupForm=this._popupElement.querySelector(".modal__form"),this._inputs=this._popupForm.querySelectorAll(".modal__input"),this._submitButton=this._popupForm.querySelector(".modal__button"),this._submitButtonText=this._submitButton.textContent}setLoading(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"Saving...";e?(this._submitButton.textContent=t,this._submitButton.disabled=!0):(this._submitButton.textContent=this._submitButtonText,this._submitButton.disabled=!1)}close(){this._popupForm.reset(),this._popupElement.removeEventListener("submit",this._submitForm),super.close()}_getInputValues(){const e={};return this._inputs.forEach((t=>{""!==t.value&&(e[t.name]=t.value)})),e}_submitForm=()=>{const e=this._getInputValues();this._handleFormSubmit(e)};_setEventListeners(){super._setEventListeners(),this._popupElement.addEventListener("submit",this._submitForm)}};const i={inputSelector:".modal__input",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__error_visible"},r=document.querySelector("#profile-edit-button"),n=document.querySelector("#profile-edit-modal"),o=document.querySelector("#profile-title-input"),a=document.querySelector("#profile-description-input"),l=n.querySelector(".modal__form"),u=document.querySelector("#add-form-modal"),c=document.querySelector("#profile-add-button"),_=u.querySelector(".modal__form"),d=document.querySelector(".cards__list"),h=document.querySelector(".profile__edit__photo"),m=document.querySelector("#profile-avatar-form"),p=new class{constructor(e){let{baseUrl:t,headers:s}=e;this._baseUrl=t,this._headers=s}_handleServerResponse(e){return e.ok?e.json():Promise.reject(`Error: ${e.status}`)}_request(e,t){return fetch(e,t).then(this._handleServerResponse)}getInitialCards(){return this._request(`${this._baseUrl}/cards`,{headers:this._headers})}getUserInfo(){return this._request(`${this._baseUrl}/users/me`,{headers:this._headers})}setUserInfo(e,t){return this._request(`${this._baseUrl}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:e,about:t})})}addCard(e){let{name:t,link:s}=e;return this._request(`${this._baseUrl}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify({name:t,link:s})})}removeCard(e){return this._request(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:this._headers})}changeLikeStatus(e,t){return this._request(`${this._baseUrl}/cards/${e}/likes`,{method:t?"DELETE":"PUT",headers:this._headers})}setUserAvatar(e){return console.log("url:"+e),this._request(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e})})}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"bf54a6ce-ba6a-4742-a5e8-9bdd0fb7708a","Content-Type":"application/json"}});let E;const v=new class{constructor(e,t,s){this._nameElement=e,this._jobElement=t,this._avatarElement=s}getUserInfo(){const e={};return e.profileName=this._nameElement.textContent,e.description=this._jobElement.textContent,e}setUserInfo(e,t){this._nameElement.textContent=e,this._jobElement.textContent=t}setUserAvatar(e){console.log(e),this._avatarElement.src=e,this._avatarElement.alt=this._nameElement.textContent}}(document.querySelector(".profile__title"),document.querySelector(".profile__description"),document.querySelector(".profile__image"));Promise.all([p.getInitialCards(),p.getUserInfo()]).then((e=>{let[t,s]=e;v.setUserInfo(s.name,s.about),v.setUserAvatar(s.avatar),E=new class{constructor(e,t){let{items:s,renderer:i}=e;this._items=s,this._renderer=i,this._containerElement=t}renderItems(){this._items.forEach((e=>{this._renderer(e)}))}addItem(e){this._containerElement.prepend(e)}prependItem(e){this._containerElement.prepend(e)}}({items:t,renderer:e=>{const t=B(e);E.addItem(t)}},d),E.renderItems()})).catch(console.error);const b=new class extends e{constructor(e){super({popupSelector:e}),this._popupForm=this._popupElement.querySelector(".modal__form"),this._submitButton=this._popupForm.querySelector(".form__button_type_delete"),this._submitButtonText=this._submitButton.textContent}setSubmitAction(e){this._handleFormSubmit=e}setLoading(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"Removing...";e?(this._submitButton.textContent=t,this._submitButton.disabled=!0):(this._submitButton.textContent=this._submitButtonText,this._submitButton.disabled=!1)}_setEventListeners(){super._setEventListeners(),this._formSubmitHandler=e=>{e.preventDefault(),this._handleFormSubmit(e)},this._popupForm.addEventListener("submit",this._formSubmitHandler)}_removeEventListeners(){super._removeEventListeners(),this._popupForm.removeEventListener("submit",this._formSubmitHandler)}}("#modal-card-delete"),S=new s("#modal-avatar-edit",(function(e){let{url:t}=e;S.setLoading(!0),p.setUserAvatar(t).then((e=>{v.setUserAvatar(e.avatar),S.close()})).catch(console.error).finally((()=>{S.setLoading(!1)}))})),L=new class extends e{constructor(e){super({popupSelector:e}),this._previewImageElement=document.querySelector(".modal__preview-image"),this._previewImageDescription=document.querySelector(".modal__preview-description")}open(e,t){this._previewImageElement.alt=e,this._previewImageDescription.textContent=e,this._previewImageElement.src=t,super.open()}}("#preview-modal"),g=new s("#profile-edit-modal",(function(e){const{nameInfo:t,jobInfo:s}=e;g.setLoading(!0),p.setUserInfo(t,s).then((()=>{console.log("here"),v.setUserInfo(t,s),g.close()})).catch(console.error).finally((()=>{g.setLoading(!1)}))})),f=new s("#add-form-modal",(function(e){const{name:t,link:s}=e;f.setLoading(!0),p.addCard({name:t,link:s}).then((e=>{const t=B(e);E.prependItem(t),f.close()})).catch(console.error).finally((()=>{f.setLoading(!1)}))}));function y(e){let{name:t,link:s}=e;L.open(t,s)}function B(e){const t=new class{constructor(e,t,s,i,r,n,o){this._name=e.name,this._link=e.link,this.isLiked=e.isLiked,this._templateSelector=t,this._handleCardImageClick=s,this._previewImageModal=n,this._previewDescriptionModal=o,this._handleDeleteClick=i,this._handleLikeButtonClick=r}removeCardElement(){this._cardElement.remove()}_getTemplate(){return this._cardElement=document.querySelector(`${this._templateSelector}`).content.querySelector(".card").cloneNode(!0),this._cardElement}_handleDeleteButton(){this._cardElement.remove(),this._cardElement=null}_toggleLikeButton(){this.isLiked?this._likeButton.classList.add("card__like-button_active"):this._likeButton.classList.remove("card__like-button_active")}updateLikes(e){this.isLiked=e,this._toggleLikeButton()}_handleLikeButton(){this._likeButton.classList.toggle("card__like-button_active")}_setEventListeners(){this._cardElement.querySelector(".card__image").addEventListener("click",(()=>{this._handleCardImageClick({name:this._name,link:this._link})})),this._cardElement.querySelector(".card__delete-button").addEventListener("click",(()=>this._handleDeleteClick())),this._cardElement.querySelector(".card__like-button").addEventListener("click",(()=>this._handleLikeButtonClick()))}getCardElement(){return this._cardElement=this._getTemplate(),this._setEventListeners(),this._cardElement.querySelector(".card__title").textContent=this._name,this._cardElement.querySelector(".card__image").src=this._link,this._cardElement.querySelector(".card__image").alt=this._name,this._deleteButton=this._cardElement.querySelector(".card__delete-button"),this._likeButton=this._cardElement.querySelector(".card__like-button"),this._toggleLikeButton(),this._cardElement}}(e,"#card-template",y,(function(){b.setSubmitAction((()=>{b.setLoading(!0),p.removeCard(e._id).then((e=>{t.removeCardElement(e._id),b.close()})).catch(console.error).finally((()=>{b.setLoading(!1)}))})),b.open()}),(function(){p.changeLikeStatus(e._id,t.isLiked).then((e=>t.updateLikes(e.isLiked))).catch(console.error)}));return t.getCardElement()}c.addEventListener("click",(()=>{k.toggleButtonState(),f.open()})),r.addEventListener("click",(()=>{const{profileName:e,description:t}=v.getUserInfo();o.value=e,a.value=t,C.toggleButtonState(),g.open()})),h.addEventListener("click",(()=>{q.toggleButtonState(),S.open()}));const k=new t(i,_);k.enableValidation();const C=new t(i,l);C.enableValidation();const q=new t(i,m);q.enableValidation()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,